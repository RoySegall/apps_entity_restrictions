<?php

/**
 * @file
 * Contains \AppsEntityRestrictionsRestfulBaseTest.
 */

class AppsEntityRestrictionsRestfulBaseTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Apps entity restrictions restful basic',
      'description' => 'Test apps entity restrictions restful basic logic.',
      'group' => 'Apps entity restrictions',
    );
  }

  /**
   * @var AppsEntityRestriction
   */
  protected $app;

  /**
   * @var StdClass
   *
   * The term object.
   */
  protected $term;

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('apps_entity_restrictions_example'));

    // Create application.
    $this->app = apps_entity_restrictions_create();
    $this->app->title = 'Demo application';
    $this->app->need = array(
      'node' => array(
        'methods' => array('get'),
        'properties' => array('nid', 'body'),
      ),
    );
    $this->app->save();

    // Create the field tags field.
    $vocabulary = (object) array(
      'name' => $this->randomName(),
      'description' => $this->randomName(),
      'machine_name' => strtolower($this->randomName()),
    );
    taxonomy_vocabulary_save($vocabulary);

    if (!field_info_field('field_tags')) {
      $field = array(
        'field_name' => 'field_tags',
        'type' => 'taxonomy_term_reference',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      );
      field_create_field($field);
    }

    if (!field_info_instance('node', 'field_tags', 'article')) {
      $instance = array(
        'field_name' => 'field_tags',
        'entity_type' => 'node',
        'bundle' => 'article',
      );
      field_create_instance($instance);
    }

    // Crete a term in the vocabulary.
    $this->term = new stdClass();
    $this->term->name = $this->randomName();
    $this->term->vid = $vocabulary->vid;
    taxonomy_term_save($this->term);
  }

  /**
   * Verify AppsEntityRestrictionsRestful::accessCallbacks() applies the
   * restriction logic.
   */
  public function testBasicRestrictions() {
    // Create a node and populate fields for testing.
    $node = $this->drupalcreateNode(array('type' => 'article'));
    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_tags->set(array($this->term->tid));
    $wrapper->body->set(array('value' => $this->randomString()));
    $wrapper->save();

    // Verify the field is populated.
    $this->assertTrue($wrapper->field_tags->value(array('identifier' => TRUE)), 'The taxonomy reference field is populated.');

    /** @var AppsEntityRestrictionsRestfulBaseNode $handler */
    $handler = restful_get_restful_handler('aer_articles');

    try {
      $handler->process();
      $this->fail('The request did not failed since the app credentials was not available.');
    } catch (\RestfulException $e) {
      $this->pass('The request failed since the app credentials was not available.');
    }

    $content = $handler->setApp($this->app)->get($node->nid);

    // Verify we got the allowed fields.
    $result = $content[0];
    $this->assertTrue(empty($result['tags']) && !empty($result['body']), 'The field body was return and the fields tags not.');

    // Set the tags field as optional for the app and check we got it.
    $this->app->need['node']['properties'][] = 'field_tags';
    $this->app->save();

    // Do the same request again and see we got the tags and the body.
    $content = $handler->setApp($this->app)->get($node->nid);
    $result = $content[0];
    $this->assertTrue(!empty($result['tags']) && !empty($result['body']), 'The field body and the fields tags returned.');
  }

}
